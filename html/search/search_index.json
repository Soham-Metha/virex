{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VIREX : Virtual Execution Console","text":"<p>VIREX (VIRtual EXecuter) is a platform-independent virtual machine designed around a flexible intermediate language called SASM (Simulated Assembly). It\u2019s inspired by the Java Virtual Machine (JVM), but unlike JVM bytecode, SASM is open, readable, and writable \u2014 you can program directly in it.</p>"},{"location":"#what-is-sasm","title":"\ud83d\ude80 What is SASM?","text":"<p>Just like Java compiles to bytecode for the JVM, any language can be compiled into SASM for VIREX. The difference is:</p> <ul> <li>SASM is assembly-like, human-readable, and editable.</li> <li>SASM is open, letting anyone build tools and languages around it.</li> </ul> <p>You can even create your own programming language that compiles into SASM and runs anywhere VIREX runs \u2014 making your language instantly portable.</p>"},{"location":"#why-sasm","title":"\ud83e\udde0 Why SASM?","text":"<ul> <li>Learn how assembly-level code works through a clean and simplified syntax.</li> <li>Build a compiler without worrying about machine-level code generation.</li> <li>Make your own language platform-independent by targeting SASM.</li> </ul>"},{"location":"#current-features","title":"\ud83d\udee0 Current Features","text":"<ul> <li>\u2705 VS Code syntax highlighter for SASM</li> <li>\ud83c\udf32 AST visualizer for seeing how your SASM code is parsed and compiled</li> <li>\ud83d\udd27 A new programming language called ORIN is currently under development. It is being designed to compile directly to SASM.</li> </ul> <p>If you're interested in compilers, language design, or virtual machines \u2014 contributions are very welcome!</p>"},{"location":"#project-structure","title":"\ud83d\udce6 Project Structure","text":"<pre><code>/docs/      # Reference documentation\n/examples/  # Sample programs\n/include/   # Public headers for VM, SASM, OCC\n/src/       # Core implementation (VM, assembler, compiler)\n/tests/     # Simple Test programs written in SASM\n/tools/themes/vs_code/ # VS Code syntax highlighter\n/install.sh # Install script for linux\n</code></pre>"},{"location":"#getting-started-linux","title":"\ud83e\uddea Getting Started (LINUX)","text":"<ol> <li>Clone this repo: <pre><code>git clone https://github.com/Soham-Metha/virex.git\ncd virex/\n</code></pre></li> <li>Build the project (requires <code>sudo</code>): <pre><code>./install.sh\n</code></pre></li> <li>Run an example program:</li> </ol> <pre><code>cd ./examples/SASM/\nvirex\n</code></pre> <p>If the TUI doesn't render properly, try adjusting your terminal font size.</p> <p>If that doesn't help, you can tweak layout values in src/VM/vm_tui.c::CreateWindows(). The constants used are defined as percentages of the screen dimensions.</p> <p>P.S. kitty terminal config, and font used, are available in <code>/tools</code></p> <ol> <li> <p>Inside VIREX, do the following:</p> </li> <li> <p>Select \"Run SASM/ORIN command with custom flags\"</p> </li> <li>Enter the following command:   <pre><code>-i helloWorld.sasm -I ./ -o tmp.sm\n</code></pre> <p>\u2328\ufe0f use Arrow keys for navigation in menu.</p> </li> <li>Select \"SASM build and exec\" by pressing 'a'</li> <li> <p>Enter the output filename (<code>tmp.sm</code>)</p> </li> <li> <p>Activate the syntax highlighter in VS Code</p> </li> <li> <p>Open VS Code</p> </li> <li>Press <code>Ctrl + Shift + P</code></li> <li>Type: <code>Preferences: Color Theme</code></li> <li>Select: <code>Palenight+sasm</code> <p>\ud83c\udfa8 Open any <code>.sasm</code> file in vs code to see the syntax highlighter at work!</p> </li> </ol>"},{"location":"#want-to-contribute","title":"\ud83d\udca1 Want to Contribute?","text":"<p>We\u2019re actively building:</p> <ol> <li>The ORIN programming language</li> <li>Improved SASM tooling (UI, debuggers, optimizers, etc.)</li> <li>Expanded Documentation and tutorials</li> </ol> <p>\ud83d\udccc For contribution guidelines and a roadmap, see CONTRIBUTING.md (coming soon).</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#syntax-highlighting","title":"Syntax Highlighting:","text":""},{"location":"#ast","title":"AST:","text":"<p>Local/Global Scopes</p> <p>Each Code Block in the visualized AST represents a Scope, Block 0 being global scope.</p>"},{"location":"#binary-executable","title":"Binary Executable:","text":""},{"location":"#gui","title":"GUI:","text":""},{"location":"#system-design-and-architecture","title":"System Design and Architecture","text":""},{"location":"#tech-stack","title":"Tech Stack","text":"<ul> <li>Programming Language: C</li> <li>Version Control: Git</li> <li>Build System: GNU Make</li> <li>AST VISUALIZER: Graphviz</li> </ul>"},{"location":"#maintainers","title":"Maintainers","text":"Tool Maintainer VIREX, SASM Soham Metha AST visualizer Soham Metha Syntax Highlighter Soham Metha ORIN Compiler Omkar Jagtap Core lib(Hashtable) Omkar Jagtap Core libs(other) Soham Metha"},{"location":"#references","title":"References","text":"<ul> <li>Tsoding</li> <li>Dr Birch</li> <li>Low Byte Productions</li> <li>Cobb Coding</li> </ul>"},{"location":"Assembler/InstructionSet/","title":"InstructionSet","text":"<ul> <li>1. Program Documentation<ul> <li>1.1. Data Types</li> <li>1.2. CPU and Register Structures<ul> <li>1.2.1. Registers Structure</li> <li>1.2.2. Explanation of Registers</li> <li>1.2.3. CPU Structure</li> </ul> </li> <li>1.3. Opcodes Description<ul> <li>1.3.1. Explanation of Parameters</li> <li>1.3.2. Notes</li> </ul> </li> <li>1.4. Error Enum Documentation<ul> <li>1.4.1. Usage</li> </ul> </li> </ul> </li> </ul>"},{"location":"Assembler/InstructionSet/#1-program-documentation","title":"1. Program Documentation","text":""},{"location":"Assembler/InstructionSet/#11-data-types","title":"1.1. Data Types","text":"<p>In this system, the following typedefs represent different data types, mapped to their respective sizes. These typedefs are aliased to standard C integer types for clarity and convenience.</p> Typedef Underlying Type Description Size Byte <code>int8_t</code> 8-bit signed integer 1 byte (8 bits) Word <code>int16_t</code> 16-bit signed integer 2 bytes (16 bits) Double_Word <code>int32_t</code> 32-bit signed integer 4 bytes (32 bits) Quad_Word <code>int64_t</code> 64-bit signed integer 8 bytes (64 bits)"},{"location":"Assembler/InstructionSet/#12-cpu-and-register-structures","title":"1.2. CPU and Register Structures","text":"<p>This section describes the structure definitions for Registers and CPU, which represent the state of a CPU and its internal registers.</p>"},{"location":"Assembler/InstructionSet/#121-registers-structure","title":"1.2.1. Registers Structure","text":"<p>The <code>Registers</code> structure contains the general-purpose registers used by the CPU. Each register is a Word (16-bit) in size.</p> Register Description Size AX Accumulator register Word (16 bits) BX Base register Word (16 bits) CX Counter register Word (16 bits) DX Data register Word (16 bits) SP Stack pointer Word (16 bits) IP Instruction pointer Word (16 bits)"},{"location":"Assembler/InstructionSet/#122-explanation-of-registers","title":"1.2.2. Explanation of Registers","text":"<ul> <li>AX: Used for arithmetic, logic, and data transfer.</li> <li>BX: Primarily used for base addressing.</li> <li>CX: Often used as a loop counter or shift count.</li> <li>DX: Used for I/O operations and large results (e.g., 32-bit).</li> <li>SP: Points to the top of the stack, used for stack operations.</li> <li>IP: Tracks the address of the next instruction to execute.</li> </ul>"},{"location":"Assembler/InstructionSet/#123-cpu-structure","title":"1.2.3. CPU Structure","text":"<p>The <code>CPU</code> structure holds the state of the CPU, including the registers and the <code>halt</code> flag.</p> <pre><code>typedef struct {\n    Registers registers;  // Holds the general-purpose registers (AX, BX, CX, DX, SP, IP)\n    int halt;             // Halt flag (0 = continue, 1 = halt execution)\n} CPU;\n</code></pre> <ul> <li>registers: A <code>Registers</code> structure containing the CPU's general-purpose registers.</li> <li>halt: A flag indicating whether the CPU should stop execution (1 for halt, 0 for continue).</li> </ul>"},{"location":"Assembler/InstructionSet/#13-opcodes-description","title":"1.3. Opcodes Description","text":"<p>This section describes the available opcodes and their corresponding operations.</p> Opcode Code Operation Parameters Description NOP 0 No operation None Does nothing; often used for padding or no-op in code. HLT 1 Halt execution None Halts execution and terminates the program. ADD 2 Addition None Adds the top two elements of the stack and pushes the result back onto the stack, discarding the original values. SUB 3 Subtraction None Subtracts the top element of the stack from the second element and pushes the result back onto the stack, discarding the original values. MUL 4 Multiply None Multiplies the top two elements of the stack and pushes the result back onto the stack, discarding the original values. DIV 5 Division None Divides the second element of the stack by the top element and pushes the result back onto the stack, discarding the original values. EQL 6 Equality Check None Compares the top two elements of the stack for equality and pushes the result (0 or 1) back onto the stack, discarding the original values. POP 7 POP and Display None Pops the top element from the stack and prints it to stdout. PSH 8 Push Word (value to push) Pushes a specified value (word) onto the stack. DUP 9 Duplicate Word (relative position) Duplicates the element at the specified relative position in the stack and pushes it to the top of the stack. JMP 10 Jump Absolute address (Word) Jumps to the specified absolute address in the program. JNZ 11 Jump if Not Zero Absolute address (Word) Jumps to the specified absolute address if the result of the previous operation was non-zero."},{"location":"Assembler/InstructionSet/#131-explanation-of-parameters","title":"1.3.1. Explanation of Parameters","text":"<ul> <li>Absolute address: the exact instruction position from the beginning of the file.</li> <li>Relative position: A position specified relative to the current stack top position.</li> </ul>"},{"location":"Assembler/InstructionSet/#132-notes","title":"1.3.2. Notes","text":"<ul> <li>JMP and JNZ are control flow instructions used to modify the program's execution path.</li> <li>Stack manipulation instructions like ADD, SUB, MUL, DIV, and EQL modify the stack by performing operations on the top two elements and pushing the result back.</li> </ul>"},{"location":"Assembler/InstructionSet/#14-error-enum-documentation","title":"1.4. Error Enum Documentation","text":"<p>This section describes the error codes that represent various error conditions that can occur during execution.</p> Error Code Description Value ERR_OK No error; operation was successful. 0 ERR_STACK_OVERFLOW Stack overflow; the stack has exceeded its allocated size. 1 ERR_STACK_UNDERFLOW Stack underflow; not enough elements in the stack for the operation. 2 ERR_DIV_BY_ZERO Division by zero; attempted division by zero. 3 ERR_ILLEGAL_INST Illegal instruction; the CPU encountered an unsupported or invalid instruction. 4 ERR_ILLEGAL_INST_ACCESS Illegal instruction access; trying to access an instruction that does't exist. 5 ERR_ILLEGAL_OPERAND Illegal operand; an operand was invalid or unsupported for the operation. 6"},{"location":"Assembler/InstructionSet/#141-usage","title":"1.4.1. Usage","text":"<p>These error codes are returned while execution of the instructions.</p>"},{"location":"Instructions/","title":"\ud83e\udde0 Instruction Set","text":"<p>Version: <code>0.5.0</code> Total Instructions Supported: <code>73</code> Operand Size: Up to 2 operands, each of 64-bits</p>"},{"location":"Instructions/#operand-types","title":"\ud83e\udde9 Operand Types","text":"<p>Instructions in SASM accept a variety of operand types:</p> Immediate Values <p>0, 1, 2, 3</p> Constants <p>M, N, O, P</p> Registers <p>L0, L1, L2, L3</p>"},{"location":"Instructions/#register-dereferencing","title":"\ud83d\uddc2\ufe0f Register Dereferencing","text":"<p>SASM registers are identified by unique IDs. Each register can be accessed either as a reference or as a value using compile-time functions.</p> <pre><code>ref(L1)  ; reference to register L1\nval(L1)  ; value stored in register L1\n</code></pre> <p>These are compile-time functions that tell the assembler how to interpret operands.</p>"},{"location":"Instructions/#related-references","title":"\ud83d\udd17 Related References","text":"<ul> <li>\ud83d\udcc4 Compile-time Functions </li> <li>\ud83d\udcc4 Register Reference </li> </ul>"},{"location":"Instructions/#instruction-documentation-template","title":"INSTRUCTION DOCUMENTATION TEMPLATE:","text":"[MEMONIC] \u2014 [Operation] PropertiesAlgorithmExample Property Value Opcode Type Operand Type Destination <pre><code>[ALGO]\n</code></pre> <pre><code>    [EXAMPLE]\n</code></pre>"},{"location":"Instructions/#instructions-not-documented","title":"INSTRUCTIONS NOT DOCUMENTED:","text":"<pre><code>INST_DONOP,\nINST_INVOK,\nINST_RETVL,\nINST_PUSHR,\nINST_SPOPR,\nINST_SHUTS,\nINST_SETR,\nINST_GETR,\nINST_CALL,\nINST_LOOP,\nINST_PUSH,\nINST_SPOP,\nINST_SWAP,\n\nINST_JMPU,\nINST_JMPC,\nINST_ANDB,\nINST_NOTB,\nINST_COPY,\nINST_DUPS,\nINST_RET,\nINST_NOT,\nINST_EQI,\nINST_GEI,\nINST_GTI,\nINST_LEI,\nINST_LTI,\nINST_NEI,\nINST_EQU,\nINST_GEU,\nINST_GTU,\nINST_LEU,\nINST_LTU,\nINST_NEU,\nINST_EQF,\nINST_GEF,\nINST_GTF,\nINST_LEF,\nINST_LTF,\nINST_NEF,\nINST_ORB,\nINST_XOR,\nINST_SHR,\nINST_SHL,\nINST_I2F,\nINST_U2F,\nINST_F2I,\nINST_F2U,\nINST_READ1U,\nINST_READ2U,\nINST_READ4U,\nINST_READ8U,\nINST_READ1I,\nINST_READ2I,\nINST_READ4I,\nINST_READ8I,\nINST_WRITE1,\nINST_WRITE2,\nINST_WRITE4,\nINST_WRITE8,\n</code></pre>"},{"location":"Instructions/Arithmetic/","title":"Arithmetic","text":"<p>This section describes the available arithmetic opcodes/mnemonics and their corresponding operations.</p> <p>All arithmetic instructions accept only a single operand. The other operand, as well as the destination, is taken from one of the Link registers: <code>L0</code>, <code>L1</code>, <code>L2</code>, <code>L3</code>.</p> <p>\ud83d\udcce See: Register Reference \u2013 Link Registers </p>"},{"location":"Instructions/Arithmetic/#addition","title":"\ud83d\udd22 Addition","text":"<p>The following opcodes are used for addition:</p> <ul> <li><code>ADDI</code> \u2014 Add Signed Integer</li> <li><code>ADDU</code> \u2014 Add Unsigned Integer</li> <li><code>ADDF</code> \u2014 Add Floating Point</li> </ul> ADDI \u2014 Add Signed Integer PropertiesAlgorithmExample Property Value Opcode 13 Type Arithmetic Operand Type Signed 64-bit integer Destination <code>L2</code> (implicit) <pre><code>L2 = L2 + &lt;signed_imm&gt;\nL2 = L2 + &lt;reg_val&gt;\nL2 = L2 + &lt;const&gt;\n</code></pre> <pre><code>; imm +ve\n    ADDI    1\n; imm -ve\n    ADDI    -123\n; reg val\n    ADDI    val(QT)\n; const\n    ADDI    SOME_CONST_VAL\n</code></pre> ADDU \u2014 Add Unsigned Integer PropertiesAlgorithmExample Property Value Opcode 18 Type Arithmetic Operand Type Unsigned 64-bit value Destination <code>L3</code> (implicit) <pre><code>L3 = L3 + &lt;unsigned_imm&gt;\nL3 = L3 + &lt;reg_val&gt;\nL3 = L3 + &lt;const&gt;\n</code></pre> <pre><code>; imm +ve\n    ADDU    1\n; reg val\n    ADDU    val(QT)\n; const\n    ADDU    SOME_CONST_VAL\n</code></pre> ADDF \u2014 Add Float value PropertiesAlgorithmExample Property Value Opcode 23 Type Arithmetic Operand Type 64-bit float value Destination <code>L1</code> (implicit) <pre><code>L1 = L1 + &lt;float&gt;\nL1 = L1 + &lt;reg_val&gt;\nL1 = L1 + &lt;const&gt;\n</code></pre> <pre><code>; imm float\n    ADDF    3.14\n; reg val\n    ADDF    val(QT)\n; const\n    ADDF    SOME_CONST_VAL\n</code></pre>"},{"location":"Instructions/Arithmetic/#subtraction","title":"\ud83d\udd22 Subtraction","text":"<p>The following opcodes are used for subtraction:</p> <ul> <li><code>SUBI</code> \u2014 Sub Signed Integer</li> <li><code>SUBU</code> \u2014 Sub Unsigned Integer</li> <li><code>SUBF</code> \u2014 Sub Floating Point</li> </ul> SUBI \u2014 Sub Signed Integer PropertiesAlgorithmExample Property Value Opcode 14 Type Arithmetic Operand Type Signed 64-bit integer Destination <code>L2</code> (implicit) <pre><code>L2 = L2 - &lt;signed_imm&gt;\nL2 = L2 - &lt;reg_val&gt;\nL2 = L2 - &lt;const&gt;\n</code></pre> <pre><code>; imm +ve\n    SUBI    1\n; imm -ve\n    SUBI    -123\n; reg val\n    SUBI    val(QT)\n; const\n    SUBI    SOME_CONST_VAL\n</code></pre> SUBU \u2014 Sub Unsigned Integer PropertiesAlgorithmExample Property Value Opcode 19 Type Arithmetic Operand Type Unsigned 64-bit value Destination <code>L3</code> (implicit) <pre><code>L3 = L3 - &lt;unsigned_imm&gt;\nL3 = L3 - &lt;reg_val&gt;\nL3 = L3 - &lt;const&gt;\n</code></pre> <pre><code>; imm +ve\n    SUBU    1\n; reg val\n    SUBU    val(QT)\n; const\n    SUBU    SOME_CONST_VAL\n</code></pre> SUBF \u2014 Sub Float value PropertiesAlgorithmExample Property Value Opcode 24 Type Arithmetic Operand Type 64-bit float value Destination <code>L1</code> (implicit) <pre><code>L1 = L1 - &lt;float&gt;\nL1 = L1 - &lt;reg_val&gt;\nL1 = L1 - &lt;const&gt;\n</code></pre> <pre><code>; imm float\n    SUBF    3.14\n; reg val\n    SUBF    val(QT)\n; const\n    SUBF    SOME_CONST_VAL\n</code></pre>"},{"location":"Instructions/Arithmetic/#multiplicaction","title":"\ud83d\udd22 Multiplicaction","text":"<p>The following opcodes are used for multiplicaction:</p> <ul> <li><code>MULI</code> \u2014 MUL Signed Integer</li> <li><code>MULU</code> \u2014 MUL Unsigned Integer</li> <li><code>MULF</code> \u2014 MUL Floating Point</li> </ul> MULI \u2014 MUL Signed Integer PropertiesAlgorithmExample Property Value Opcode 15 Type Arithmetic Operand Type Signed 64-bit integer Destination <code>L2</code> (implicit) <pre><code>L2 = L2 * &lt;signed_imm&gt;\nL2 = L2 * &lt;reg_val&gt;\nL2 = L2 * &lt;const&gt;\n</code></pre> <pre><code>; imm +ve\n    MULI    1\n; imm -ve\n    MULI    -123\n; reg val\n    MULI    val(QT)\n; const\n    MULI    SOME_CONST_VAL\n</code></pre> MULU \u2014 Mul Unsigned Integer PropertiesAlgorithmExample Property Value Opcode 20 Type Arithmetic Operand Type Unsigned 64-bit value Destination <code>L3</code> (implicit) <pre><code>L3 = L3 * &lt;unsigned_imm&gt;\nL3 = L3 * &lt;reg_val&gt;\nL3 = L3 * &lt;const&gt;\n</code></pre> <pre><code>; imm +ve\n    MULU    1\n; reg val\n    MULU    val(QT)\n; const\n    MULU    SOME_CONST_VAL\n</code></pre> MULF \u2014 Mul Float value PropertiesAlgorithmExample Property Value Opcode 25 Type Arithmetic Operand Type 64-bit float value Destination <code>L1</code> (implicit) <pre><code>L1 = L1 * &lt;float&gt;\nL1 = L1 * &lt;reg_val&gt;\nL1 = L1 * &lt;const&gt;\n</code></pre> <pre><code>; imm float\n    MULF    3.14\n; reg val\n    MULF    val(QT)\n; const\n    MULF    SOME_CONST_VAL\n</code></pre> <p>| MULI | | | MULU | | | MULF | | | DIVI | | | DIVU | | | DIVF | | | MODI | | | MODU | |</p>"},{"location":"LIBS/univ_cmdutils/","title":"1. Command Line Utilities for Argument Parsing","text":"<p>File: <code>univ_cmdutils.h</code> Author: Soham Metha Date: January 2025</p> <p>The <code>univ_cmdutils.h</code> header provides generic utility functions for handling command line arguments efficiently.</p>"},{"location":"LIBS/univ_cmdutils/#11-table-of-contents","title":"1.1. Table of Contents","text":"<ul> <li>1. Command Line Utilities for Argument Parsing<ul> <li>1.1. Table of Contents</li> <li>1.2. Data Structures<ul> <li>1.2.1. Option Enumeration</li> </ul> </li> <li>1.3. Functions<ul> <li>1.3.1. getNextCmdLineArg<ul> <li>1.3.1.1. Declaration</li> <li>1.3.1.2. Description</li> <li>1.3.1.3. Parameters</li> <li>1.3.1.4. Return Value</li> <li>1.3.1.5. Usage Example</li> </ul> </li> <li>1.3.2. flagAsOption<ul> <li>1.3.2.1. Declaration</li> <li>1.3.2.2. Description</li> <li>1.3.2.3. Parameters</li> <li>1.3.2.4. Return Value</li> <li>1.3.2.5. Usage Example</li> </ul> </li> </ul> </li> <li>1.4. Details<ul> <li>1.4.1. Internal Mapping for Flags and Options</li> <li>1.4.2. Example Usage</li> </ul> </li> <li>1.5. Notes</li> </ul> </li> </ul>"},{"location":"LIBS/univ_cmdutils/#12-data-structures","title":"1.2. Data Structures","text":""},{"location":"LIBS/univ_cmdutils/#121-option-enumeration","title":"1.2.1. Option Enumeration","text":"<p>The <code>Option</code> enumeration defines a set of possible command line options that correspond to specific flags:</p> Value Description <code>FILE_INPUT</code> Represents an option for file input. <code>FILE_OUTPUT</code> Represents an option for file output. <code>MODE_ASSEMBLE</code> Represents assembly mode. <code>MODE_DISASSEMBLE</code> Represents disassembly mode. <code>ASM_LANG</code> Represents assembly language."},{"location":"LIBS/univ_cmdutils/#13-functions","title":"1.3. Functions","text":""},{"location":"LIBS/univ_cmdutils/#131-getnextcmdlinearg","title":"1.3.1. getNextCmdLineArg","text":""},{"location":"LIBS/univ_cmdutils/#1311-declaration","title":"1.3.1.1. Declaration","text":"<pre><code>char* getNextCmdLineArg(int* argc, char*** argv);\n</code></pre>"},{"location":"LIBS/univ_cmdutils/#1312-description","title":"1.3.1.2. Description","text":"<p>This function retrieves the next argument from the command line argument list (<code>argv</code>) and updates the argument count (<code>argc</code>) and argument list pointers to reflect the remaining arguments.</p>"},{"location":"LIBS/univ_cmdutils/#1313-parameters","title":"1.3.1.3. Parameters","text":"Parameter Description <code>argc</code> A pointer to the number of remaining arguments. <code>argv</code> A pointer to the list of argument strings."},{"location":"LIBS/univ_cmdutils/#1314-return-value","title":"1.3.1.4. Return Value","text":"<ul> <li>Returns the next command line argument as a string.</li> </ul>"},{"location":"LIBS/univ_cmdutils/#1315-usage-example","title":"1.3.1.5. Usage Example","text":"<pre><code>int main(int argc, char* argv[]) {\n    char* arg = getNextCmdLineArg(&amp;argc, &amp;argv);\n    printf(\"Program Name : %s\\n\", arg);\n    return 0;\n}\n</code></pre>"},{"location":"LIBS/univ_cmdutils/#132-flagasoption","title":"1.3.2. flagAsOption","text":""},{"location":"LIBS/univ_cmdutils/#1321-declaration","title":"1.3.2.1. Declaration","text":"<pre><code>Option flagAsOption(char* s);\n</code></pre>"},{"location":"LIBS/univ_cmdutils/#1322-description","title":"1.3.2.2. Description","text":"<p>This function maps a command line flag (e.g., <code>-i</code>, <code>-o</code>) to its corresponding <code>Option</code> enumeration value. It uses an internal mapping (<code>OptionStringMap</code>) to perform the conversion.</p>"},{"location":"LIBS/univ_cmdutils/#1323-parameters","title":"1.3.2.3. Parameters","text":"Parameter Description <code>s</code> The command line flag string to be converted."},{"location":"LIBS/univ_cmdutils/#1324-return-value","title":"1.3.2.4. Return Value","text":"<ul> <li>Returns the corresponding <code>Option</code> enumeration value if the flag is found.</li> <li>Returns <code>-1</code> if no matching flag is found.</li> </ul>"},{"location":"LIBS/univ_cmdutils/#1325-usage-example","title":"1.3.2.5. Usage Example","text":"<pre><code>Option opt = flagAsOption(\"-i\");\nif (opt == FILE_INPUT) {\n    printf(\"File input option selected.\\n\");\n}\n</code></pre>"},{"location":"LIBS/univ_cmdutils/#14-details","title":"1.4. Details","text":""},{"location":"LIBS/univ_cmdutils/#141-internal-mapping-for-flags-and-options","title":"1.4.1. Internal Mapping for Flags and Options","text":"<p>The following mapping is used internally to convert command line flags to their corresponding <code>Option</code> enumeration values:</p> <pre><code>-   `\"-i\"` \u2192 `FILE_INPUT`\n-   `\"-o\"` \u2192 `FILE_OUTPUT`\n-   `\"-a\"` \u2192 `MODE_ASSEMBLE`\n-   `\"-d\"` \u2192 `MODE_DISASSEMBLE`\n-   `\"-l\"` \u2192 `ASM_LANG`\n</code></pre>"},{"location":"LIBS/univ_cmdutils/#142-example-usage","title":"1.4.2. Example Usage","text":"<p>Here\u2019s how you can use the provided utilities in a typical command line program:</p> <pre><code>#include \"univ_cmdutils.h\"\n#include &lt;stdio.h&gt;\n\nint main(int argc, char* argv[]) {\n    while (argc &gt; 0) {\n        char* arg = getNextCmdLineArg(&amp;argc, &amp;argv);\n        processFlag(arg, &amp;argc, &amp;argv);\n    }\n    return 0;\n}\nvoid processFlag(char* flag, int* argc, char*** argv)\n{\n\n    Option opt = flagAsOption(flag);\n\n    switch (opt) {\n    case FILE_INPUT:\n        printf(\"Option: File Input\\n\");\n        break;\n    case FILE_OUTPUT:\n        printf(\"Option: File Output\\n\");\n        break;\n    case MODE_ASSEMBLE:\n        printf(\"Option: Assemble Mode\\n\");\n        break;\n    case MODE_DISASSEMBLE:\n        printf(\"Option: Disassemble Mode\\n\");\n        break;\n    case ASM_LANG:\n        printf(\"Option: Assembly Language\\n\");\n        break;\n    default:\n        printf(\"Unknown or invalid flag: %s\\n\", arg);\n        break;\n    }\n}\n</code></pre>"},{"location":"LIBS/univ_cmdutils/#15-notes","title":"1.5. Notes","text":"<ul> <li>Ensure that the flags provided match the ones defined in the <code>OptionStringMap</code>.</li> <li>Be cautious with memory management for dynamically allocated arguments or strings.</li> <li>This implementation assumes valid input and does not handle malformed command line arguments robustly.</li> </ul>"},{"location":"LIBS/univ_defs/","title":"1. Universal Definitions for the 16-bit Virtual Gameboy (GBVM) Library","text":"<p>File: <code>univ_defs.h</code> Author: Soham Metha Date: January 2025</p> <p>The <code>univ_defs.h</code> file provides core definitions essential for the functioning of the GBVM library. It ensures consistency and reusability of standard types and constants across the library, which simulates a 16-bit virtual machine.</p>"},{"location":"LIBS/univ_defs/#11-table-of-contents","title":"1.1. Table of Contents","text":"<ul> <li>1. Universal Definitions for the 16-bit Virtual Gameboy (GBVM) Library<ul> <li>1.1. Table of Contents</li> <li>1.2. Included Libraries</li> <li>1.3. Constants<ul> <li>1.3.1. Example Usage</li> </ul> </li> <li>1.4. Type Definitions</li> <li>1.5. Notes</li> </ul> </li> </ul>"},{"location":"LIBS/univ_defs/#12-included-libraries","title":"1.2. Included Libraries","text":"<p>The following standard C libraries are included in <code>univ_defs.h</code>:</p> <ul> <li><code>assert.h</code></li> <li><code>ctype.h</code></li> <li><code>errno.h</code></li> <li><code>stdbool.h</code></li> <li><code>stdint.h</code></li> <li><code>stdio.h</code></li> <li><code>stdlib.h</code></li> <li><code>string.h</code></li> </ul>"},{"location":"LIBS/univ_defs/#13-constants","title":"1.3. Constants","text":"<p>This file defines several constants used for configuring the GBVM's operational limits:</p> Constant Name Value Description <code>EXECUTION_LIMIT</code> <code>1024</code> The maximum number of instructions that can be executed in a single session. <code>PROGRAM_CAPACITY</code> <code>1024</code> The maximum size of the program memory. <code>STACK_CAPACITY</code> <code>1024</code> The maximum size of the stack memory. <code>MAX_WORD</code> <code>32767</code> The maximum value that can be stored in a <code>Word</code> type."},{"location":"LIBS/univ_defs/#131-example-usage","title":"1.3.1. Example Usage","text":"<pre><code>if (instructionCount &gt; EXECUTION_LIMIT) {\n    printf(\"Error: Execution limit exceeded.\\n\");\n    exit(1);\n}\n</code></pre>"},{"location":"LIBS/univ_defs/#14-type-definitions","title":"1.4. Type Definitions","text":"<p>The file introduces custom type definitions for the GBVM's memory and processing needs:</p> Type Name Base Type Description <code>Byte</code> <code>char</code> Represents a single byte. <code>Word</code> <code>short int</code> Represents a 16-bit signed word. <code>Double_Word</code> <code>int</code> Represents a 32-bit signed double word. <code>Quad_Word</code> <code>long long int</code> Represents a 64-bit signed quad word."},{"location":"LIBS/univ_defs/#15-notes","title":"1.5. Notes","text":"<ul> <li>The constants and types are designed to align with the 16-bit architecture of the virtual machine.</li> <li>All custom types (<code>Byte</code>, <code>Word</code>, etc.) rely on their corresponding standard C types to ensure portability and clarity.</li> <li>Always include <code>univ_defs.h</code> in files that require these constants or types.</li> </ul>"},{"location":"LIBS/univ_errors/","title":"Error Handling Functions for the GBVM Library","text":"<p>File: <code>univ_errors.h</code> Author: Soham Metha Date: January 2025</p> <p>The <code>univ_errors.h</code> file provides:</p> <ol> <li>An <code>Error</code> enumeration for defining error codes used throughout the library.</li> <li>Functions to display error messages, debug information, and handle program termination when errors occur.</li> </ol>"},{"location":"LIBS/univ_errors/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Error Handling Functions for the GBVM Library<ul> <li>Table of Contents</li> <li>Error Enumeration</li> <li>Function Documentation<ul> <li>const char* errorAsCstr(const Error*)</li> <li>void fileErrorDispWithExit(const char*, const char*)</li> <li>void executionErrorWithExit(const Error*)</li> <li>void displayMsgWithExit(const char*)</li> <li>void displayStringMessageError(const char*, String)</li> <li>void debugCommentDisplay(String*)</li> </ul> </li> <li>Example Usage<ul> <li>Error Conversion Example</li> <li>Handling File Errors</li> <li>Debug Comment Display</li> </ul> </li> <li>Notes</li> </ul> </li> </ul>"},{"location":"LIBS/univ_errors/#error-enumeration","title":"Error Enumeration","text":"<p>The <code>Error</code> enum defines various error codes to classify and identify specific types of errors.</p> Enum Value Code Description <code>ERR_OK</code> <code>0</code> No error. <code>ERR_STACK_OVERFLOW</code> <code>1</code> Stack overflow error. <code>ERR_STACK_UNDERFLOW</code> <code>2</code> Stack underflow error. <code>ERR_DIV_BY_ZERO</code> <code>3</code> Division by zero error. <code>ERR_ILLEGAL_INST</code> <code>4</code> Illegal instruction error. <code>ERR_ILLEGAL_INST_ACCESS</code> <code>5</code> Illegal instruction access error. <code>ERR_ILLEGAL_OPERAND</code> <code>6</code> Illegal operand error. <code>ERR_ILLEGAL_ALU_OPERATION</code> <code>7</code> Illegal ALU operation error."},{"location":"LIBS/univ_errors/#function-documentation","title":"Function Documentation","text":""},{"location":"LIBS/univ_errors/#const-char-errorascstrconst-error","title":"const char errorAsCstr(const Error)","text":"<p>Description: Converts an <code>Error</code> enum value to a human-readable C-style string. If the <code>Error</code> value is unrecognized, the program crashes with the message: <code>univ_errors : errorAsCstr : Unreachable</code>.</p> <p>Parameters:</p> Parameter Type Description <code>error</code> <code>Error*</code> Pointer to the <code>Error</code> value. <p>Returns: A C-style string representation of the error.</p>"},{"location":"LIBS/univ_errors/#void-fileerrordispwithexitconst-char-const-char","title":"void fileErrorDispWithExit(const char, const char)","text":"<p>Description: Displays an error message alongside a file path and exits the program.</p> <p>Parameters:</p> Parameter Type Description <code>message</code> <code>char*</code> The error message to display. <code>filePath</code> <code>char*</code> The file path associated with the error. <p>Returns: None. Exits the program.</p>"},{"location":"LIBS/univ_errors/#void-executionerrorwithexitconst-error","title":"void executionErrorWithExit(const Error*)","text":"<p>Description: Displays an execution error message based on the <code>Error</code> enum value and exits the program.</p> <p>Parameters:</p> Parameter Type Description <code>error</code> <code>Error*</code> Pointer to the <code>Error</code> value. <p>Returns: None. Exits the program.</p>"},{"location":"LIBS/univ_errors/#void-displaymsgwithexitconst-char","title":"void displayMsgWithExit(const char*)","text":"<p>Description: Displays a generic error message and exits the program.</p> <p>Parameters:</p> Parameter Type Description <code>message</code> <code>char*</code> The error message to display. <p>Returns: None. Exits the program.</p>"},{"location":"LIBS/univ_errors/#void-displaystringmessageerrorconst-char-string","title":"void displayStringMessageError(const char*, String)","text":"<p>Description: Displays a warning message alongside a <code>String</code> object. Formats the output to enhance readability.</p> <p>Parameters:</p> Parameter Type Description <code>msg</code> <code>char*</code> The warning message to display. <code>str</code> <code>String</code> The associated <code>String</code> object. <p>Returns: None.</p>"},{"location":"LIBS/univ_errors/#void-debugcommentdisplaystring","title":"void debugCommentDisplay(String*)","text":"<p>Description: Displays debug comments from the given <code>String</code> object. These comments are identified by <code>#</code> or <code>;</code> and are formatted to a width limit of 125 characters.</p> <p>Parameters:</p> Parameter Type Description <code>s</code> <code>String*</code> The <code>String</code> object containing the debug comment. <p>Returns: None.</p>"},{"location":"LIBS/univ_errors/#example-usage","title":"Example Usage","text":""},{"location":"LIBS/univ_errors/#error-conversion-example","title":"Error Conversion Example","text":"<pre><code>#include \"univ_errors.h\"\n#include &lt;stdio.h&gt;\n\nint main() {\n    Error err = ERR_DIV_BY_ZERO;\n    printf(\"Error: %s\\n\", errorAsCstr(&amp;err));\n    return 0;\n}\n</code></pre>"},{"location":"LIBS/univ_errors/#handling-file-errors","title":"Handling File Errors","text":"<pre><code>#include \"univ_errors.h\"\n\nvoid processFile(const char* filePath) {\n    if (filePath == NULL) {\n        fileErrorDispWithExit(\"File path cannot be null\", filePath);\n    }\n}\n</code></pre>"},{"location":"LIBS/univ_errors/#debug-comment-display","title":"Debug Comment Display","text":"<pre><code>#include \"univ_errors.h\"\n\nvoid debugExample() {\n    const char* s = \"# This is a debug comment\"\n    String comment = (String){ strlen(s), s };\n    debugCommentDisplay(&amp;comment);\n}\n</code></pre>"},{"location":"LIBS/univ_errors/#notes","title":"Notes","text":"<ul> <li>Ensure <code>univ_strings.h</code> is included for the <code>String</code> type.</li> <li>Error handling functions are critical for debugging and graceful error recovery.</li> <li>Use <code>debugCommentDisplay</code> for debugging SASM files with properly formatted comments.</li> </ul>"},{"location":"LIBS/univ_fileops/","title":"1. File Operations Functions for the GBVM Library","text":"<p>File: <code>univ_fileops.h</code> Author: Soham Metha Date: January 2025</p> <p>The <code>univ_fileops.h</code> file contains utility functions for performing essential file operations. All functions display informative error messages and terminate execution if a critical error is encountered.</p>"},{"location":"LIBS/univ_fileops/#11-table-of-contents","title":"1.1. Table of Contents","text":"<ul> <li>Function Documentation<ul> <li>openFile</li> <li>closeFile</li> <li>getFileSize</li> </ul> </li> <li>Example Usage</li> </ul>"},{"location":"LIBS/univ_fileops/#12-function-documentation","title":"1.2. Function Documentation","text":""},{"location":"LIBS/univ_fileops/#121-file-openfileconst-char-filepath-const-char-mode","title":"1.2.1. <code>FILE* openFile(const char* filePath, const char* mode)</code>","text":"<p>Description: Opens a file with the specified file path and mode. If the file cannot be opened, an error message is displayed, and the program exits.</p> <p>Parameters:</p> Parameter Type Description <code>filePath</code> <code>const char*</code> The path of the file to be opened. <code>mode</code> <code>const char*</code> The mode in which to open the file. <p>Returns: A pointer to the opened file (<code>FILE*</code>).</p> <p>Behavior:</p> <ul> <li>Exits the program if the file cannot be opened.</li> </ul>"},{"location":"LIBS/univ_fileops/#122-void-closefileconst-char-filepath-file-file","title":"1.2.2. <code>void closeFile(const char* filePath, FILE* file)</code>","text":"<p>Description: Closes the specified file. If the file pointer is <code>NULL</code>, the function safely returns without performing any operations. If the file cannot be closed, an error message is displayed, and the program exits.</p> <p>Parameters:</p> Parameter Type Description <code>filePath</code> <code>const char*</code> The path of the file to be closed. <code>file</code> <code>FILE*</code> A pointer to the file to be closed. <p>Returns: None.</p> <p>Behavior:</p> <ul> <li>Safely handles <code>NULL</code> file pointers.</li> <li>Exits the program if the file cannot be closed.</li> </ul>"},{"location":"LIBS/univ_fileops/#123-int-getfilesizefile-f-const-char-filepath","title":"1.2.3. <code>int getFileSize(FILE* f, const char* filePath)</code>","text":"<p>Description: Gets the size of the specified file in bytes. If the file pointer is <code>NULL</code> or an error occurs while reading the file, an error message is displayed, and the program exits.</p> <p>Parameters:</p> Parameter Type Description <code>f</code> <code>FILE*</code> A pointer to the file. <code>filePath</code> <code>const char*</code> The path of the file. <p>Returns: The size of the file in bytes (<code>int</code>).</p> <p>Behavior:</p> <ul> <li>Exits the program if the file pointer is <code>NULL</code> or an error occurs during size calculation.</li> </ul>"},{"location":"LIBS/univ_fileops/#13-example-usage","title":"1.3. Example Usage","text":"<pre><code>#include \"univ_fileops.h\"\n#include &lt;stdio.h&gt;\n\nint main() {\n    const char* filePath = \"example.txt\";\n    FILE* file = openFile(filePath, \"r\");\n\n    int size = getFileSize(file, filePath);\n    printf(\"Size of '%s': %d bytes\\n\", filePath, size);\n\n    closeFile(filePath, file);\n    return 0;\n}\n</code></pre>"},{"location":"LIBS/univ_strings/","title":"1. String Manipulation Functions for the GBVM Library","text":"<p>File: <code>univ_strings.h</code> Author: Soham Metha Date: January 2025</p> <p>The <code>univ_strings.h</code> file provides declarations for various string manipulation functions used in the GBVM library. These functions allow operations like trimming whitespace, splitting strings, converting strings to integers, and more.</p>"},{"location":"LIBS/univ_strings/#11-table-of-contents","title":"1.1. Table of Contents","text":"<ul> <li>Structures</li> <li>Function Documentation<ul> <li>ltrim</li> <li>rtrim</li> <li>trim</li> <li>splitStr</li> <li>strToInt</li> <li>printString</li> </ul> </li> <li>Example Usage</li> </ul>"},{"location":"LIBS/univ_strings/#12-structures","title":"1.2. Structures","text":""},{"location":"LIBS/univ_strings/#121-string","title":"1.2.1. <code>String</code>","text":"<p>Description: The <code>String</code> structure represents a string with its length and data. It provides a convenient way to manage strings while maintaining metadata about their size.</p> <p>Members:</p> Member Type Description <code>length</code> <code>size_t</code> The length of the string. <code>data</code> <code>const char*</code> A pointer to the character data."},{"location":"LIBS/univ_strings/#13-function-documentation","title":"1.3. Function Documentation","text":""},{"location":"LIBS/univ_strings/#131-string-ltrimstring-s","title":"1.3.1. <code>String ltrim(String s)</code>","text":"<p>Description: Removes any leading whitespace characters from the input string and returns the modified string.</p> <p>Parameters:</p> Parameter Type Description <code>s</code> <code>String</code> The input string. <p>Returns: A <code>String</code> object with leading whitespace removed.</p>"},{"location":"LIBS/univ_strings/#132-string-rtrimstring-s","title":"1.3.2. <code>String rtrim(String s)</code>","text":"<p>Description: Removes any trailing whitespace characters from the input string and returns the modified string.</p> <p>Parameters:</p> Parameter Type Description <code>s</code> <code>String</code> The input string. <p>Returns: A <code>String</code> object with trailing whitespace removed.</p>"},{"location":"LIBS/univ_strings/#133-string-trimstring-s","title":"1.3.3. <code>String trim(String s)</code>","text":"<p>Description: Removes both leading and trailing whitespace characters from the input string and returns the modified string.</p> <p>Parameters:</p> Parameter Type Description <code>s</code> <code>String</code> The input string. <p>Returns: A <code>String</code> object with both leading and trailing whitespace removed.</p>"},{"location":"LIBS/univ_strings/#134-string-splitstrstring-s-char-c","title":"1.3.4. <code>String splitStr(String* s, char c)</code>","text":"<p>Description: Splits the input string into two parts at the first occurrence of the specified character. The first part is returned, and the original string is modified to contain only the second part.</p> <p>Parameters:</p> Parameter Type Description <code>s</code> <code>String*</code> A pointer to the input string to be split. <code>c</code> <code>char</code> The character at which to split the string. <p>Returns: The first part of the string before the specified character as a <code>String</code>.</p>"},{"location":"LIBS/univ_strings/#135-int-strtointstring-s","title":"1.3.5. <code>int strToInt(String s)</code>","text":"<p>Description: Converts the input string to an integer.</p> <p>Parameters:</p> Parameter Type Description <code>s</code> <code>String</code> The input string to convert. <p>Returns: The integer value represented by the string.</p>"},{"location":"LIBS/univ_strings/#136-void-printstringstring-s","title":"1.3.6. <code>void printString(String s)</code>","text":"<p>Description: Prints the input string to the standard output.</p> <p>Parameters:</p> Parameter Type Description <code>s</code> <code>String</code> The string to be printed. <p>Returns: None.</p>"},{"location":"LIBS/univ_strings/#14-example-usage","title":"1.4. Example Usage","text":""},{"location":"LIBS/univ_strings/#141-trimming-whitespace","title":"1.4.1. Trimming Whitespace","text":"<pre><code>#include \"univ_strings.h\"\n\nint main() {\n    String s = {14, \"   Hello World   \"};\n    String trimmed = trim(s);\n    printString(trimmed);  // Output: \"Hello World\"\n    return 0;\n}\n</code></pre>"},{"location":"LIBS/univ_strings/#142-splitting-a-string","title":"1.4.2. Splitting a String","text":"<pre><code>#include \"univ_strings.h\"\n\nint main() {\n    String s = {11, \"key=value\"};\n    String key = splitStr(&amp;s, '=');\n\n    printString(key); // Output: \"key\"\n    printString(s);   // Output: \"value\"\n    return 0;\n}\n</code></pre>"},{"location":"LIBS/univ_strings/#143-converting-a-string-to-integer","title":"1.4.3. Converting a String to Integer","text":"<pre><code>#include \"univ_strings.h\"\n\nint main() {\n    String s = {3, \"123\"};\n    int number = strToInt(s);\n    printf(\"Number: %d\\n\", number);  // Output: Number: 123\n    return 0;\n}\n</code></pre>"},{"location":"OCC/O_codegenerator%20/","title":"O codegenerator","text":"<p>MISSING DOCUMENTATION. author Omkar Jagtap date January 2025</p>"},{"location":"OCC/O_lexer%20/","title":"O lexer","text":"<p>MISSING DOCUMENTATION. author Omkar Jagtap date January 2025</p>"},{"location":"OCC/O_parser%20/","title":"O parser","text":"<p>MISSING DOCUMENTATION. author Omkar Jagtap date January 2025</p>"},{"location":"SASM/sasm_assembler%20/","title":"1. Assembly and Disassembly Functions for SASM","text":"<p>File: <code>sasm_assembler.h</code> Description: This file provides functions for assembling and disassembling programs in a custom assembly language. Author: Soham Metha Date: January 2025</p>"},{"location":"SASM/sasm_assembler%20/#11-table-of-contents","title":"1.1. Table of Contents","text":"<ul> <li>1. Assembly and Disassembly Functions for SASM<ul> <li>1.1. Table of Contents</li> <li>1.2. Functions<ul> <li>1.2.1. Disassemble Bytecode into Program</li> <li>1.2.2. Assemble Program into Bytecode</li> <li>1.2.3. Process Line</li> <li>1.2.4. Parse Assembly into Program</li> <li>1.2.5. Load File into String</li> <li>1.2.6. Write Program to File</li> <li>1.2.7. Assembly Mode Operations</li> <li>1.2.8. Disassembly Mode Operations</li> </ul> </li> <li>1.3. References</li> <li>1.4. Example Usage<ul> <li>1.4.1. Assembling a Program</li> <li>1.4.2. Disassembling Bytecode</li> </ul> </li> </ul> </li> </ul>"},{"location":"SASM/sasm_assembler%20/#12-functions","title":"1.2. Functions","text":""},{"location":"SASM/sasm_assembler%20/#121-disassemble-bytecode-into-program","title":"1.2.1. Disassemble Bytecode into Program","text":"<p>Declaration:</p> <pre><code>Program disassembleBytecodeIntoProgram(const char* filePath);\n</code></pre> <p>Description: Takes the path to a binary file containing bytecode and disassembles it into a <code>Program</code> structure.</p> <p>Parameters:</p> <ul> <li><code>filePath</code>: Path to the file containing the bytecode.</li> </ul> <p>Returns: The disassembled <code>Program</code> structure.</p>"},{"location":"SASM/sasm_assembler%20/#122-assemble-program-into-bytecode","title":"1.2.2. Assemble Program into Bytecode","text":"<p>Declaration:</p> <pre><code>void assembleProgramIntoBytecode(const Program* prog, const char* filePath);\n</code></pre> <p>Description: Takes a <code>Program</code> structure, assembles it into bytecode, and writes it to a binary file.</p> <p>Parameters:</p> <ul> <li><code>prog</code>: Pointer to the <code>Program</code> structure to assemble.</li> <li><code>filePath</code>: Path to the output binary file.</li> </ul>"},{"location":"SASM/sasm_assembler%20/#123-process-line","title":"1.2.3. Process Line","text":"<p>Declaration:</p> <pre><code>Instruction processLine(String* line);\n</code></pre> <p>Description: Processes a single line of assembly code and converts it into an <code>Instruction</code> structure.</p> <p>Parameters:</p> <ul> <li><code>line</code>: Pointer to the line of assembly code.</li> </ul> <p>Returns: The processed <code>Instruction</code> structure.</p>"},{"location":"SASM/sasm_assembler%20/#124-parse-assembly-into-program","title":"1.2.4. Parse Assembly into Program","text":"<p>Declaration:</p> <pre><code>Program parseAsmIntoProgram(String* src);\n</code></pre> <p>Description: Parses a string of assembly code into a <code>Program</code> structure.</p> <p>Parameters:</p> <ul> <li><code>src</code>: Pointer to the string containing assembly code.</li> </ul> <p>Returns: The parsed <code>Program</code> structure.</p>"},{"location":"SASM/sasm_assembler%20/#125-load-file-into-string","title":"1.2.5. Load File into String","text":"<p>Declaration:</p> <pre><code>String loadFileIntoString(const char* filePath);\n</code></pre> <p>Description: Loads the contents of a file into a string.</p> <p>Parameters:</p> <ul> <li><code>filePath</code>: Path to the file.</li> </ul> <p>Returns: The loaded <code>String</code>.</p>"},{"location":"SASM/sasm_assembler%20/#126-write-program-to-file","title":"1.2.6. Write Program to File","text":"<p>Declaration:</p> <pre><code>void writeProgramToFile(const Program* prog, const char* filePath);\n</code></pre> <p>Description: Writes a <code>Program</code> structure to a non-binary file.</p> <p>Parameters:</p> <ul> <li><code>prog</code>: Pointer to the <code>Program</code> structure.</li> <li><code>filePath</code>: Path to the output file.</li> </ul>"},{"location":"SASM/sasm_assembler%20/#127-assembly-mode-operations","title":"1.2.7. Assembly Mode Operations","text":"<p>Declaration:</p> <pre><code>int assemblyMode(char* inputFile, char* outputFile);\n</code></pre> <p>Description: Performs assembly mode operations. Reads assembly code from an input file, assembles it into bytecode, and writes it to an output file.</p> <p>Parameters:</p> <ul> <li><code>inputFile</code>: Path to the input file containing assembly code.</li> <li><code>outputFile</code>: Path to the output file to store bytecode.</li> </ul> <p>Returns: <code>0</code> if successful.</p>"},{"location":"SASM/sasm_assembler%20/#128-disassembly-mode-operations","title":"1.2.8. Disassembly Mode Operations","text":"<p>Declaration:</p> <pre><code>int disassemblyMode(char* inputFile, char* outputFile);\n</code></pre> <p>Description: Performs disassembly mode operations. Reads bytecode from an input file, disassembles it into assembly code, and writes it to an output file.</p> <p>Parameters:</p> <ul> <li><code>inputFile</code>: Path to the input file containing bytecode.</li> <li><code>outputFile</code>: Path to the output file to store assembly code.</li> </ul> <p>Returns: <code>0</code> if successful.</p>"},{"location":"SASM/sasm_assembler%20/#13-references","title":"1.3. References","text":"<ul> <li><code>sasm_instructions.h</code> for <code>Instruction</code> and <code>Program</code> structures.</li> <li><code>univ_strings.h</code> for string handling utilities.</li> </ul>"},{"location":"SASM/sasm_assembler%20/#14-example-usage","title":"1.4. Example Usage","text":""},{"location":"SASM/sasm_assembler%20/#141-assembling-a-program","title":"1.4.1. Assembling a Program","text":"<pre><code>#include \"sasm_assembler.h\"\n\nint main() {\n    Program program = parseAsmIntoProgram(&amp;assemblyCode);\n    assembleProgramIntoBytecode(&amp;program, \"output.bytecode\");\n    return 0;\n}\n</code></pre>"},{"location":"SASM/sasm_assembler%20/#142-disassembling-bytecode","title":"1.4.2. Disassembling Bytecode","text":"<pre><code>#include \"sasm_assembler.h\"\n\nint main() {\n    Program program = disassembleBytecodeIntoProgram(\"input.bytecode\");\n    writeProgramToFile(&amp;program, \"output.asm\");\n    return 0;\n}\n</code></pre>"},{"location":"SASM/sasm_flags%20/","title":"1. SASM Flags Manipulation","text":"<p>File: <code>sasm_flags.h</code> Author: Soham Metha Date: January 2025</p>"},{"location":"SASM/sasm_flags%20/#11-table-of-contents","title":"1.1. Table of Contents","text":"<ul> <li>1. SASM Flags Manipulation<ul> <li>1.1. Table of Contents</li> <li>1.2. Flags Enum</li> <li>1.3. Flag Manipulation Functions<ul> <li>1.3.1. Halt Flag</li> <li>1.3.2. Sign Flag</li> <li>1.3.3. Overflow Flag</li> <li>1.3.4. Carry Flag</li> <li>1.3.5. Borrow Flag</li> <li>1.3.6. Parity Flag</li> <li>1.3.7. Zero Flag</li> </ul> </li> </ul> </li> </ul>"},{"location":"SASM/sasm_flags%20/#12-flags-enum","title":"1.2. Flags Enum","text":"<p>The <code>Flags</code> enumeration defines individual CPU flag bit masks, allowing manipulation of specific flags using bitwise operations.</p> Flag Bit Mask Description Halt 1 &lt;&lt; 0 Halt flag Sign 1 &lt;&lt; 1 Sign flag Overflow 1 &lt;&lt; 2 Overflow flag Carry 1 &lt;&lt; 3 Carry flag Borrow 1 &lt;&lt; 4 Borrow flag Parity 1 &lt;&lt; 5 Parity flag Zero 1 &lt;&lt; 6 Zero flag"},{"location":"SASM/sasm_flags%20/#13-flag-manipulation-functions","title":"1.3. Flag Manipulation Functions","text":""},{"location":"SASM/sasm_flags%20/#131-halt-flag","title":"1.3.1. Halt Flag","text":"<ul> <li> <p>Set Halt Flag</p> <pre><code>void setHalt(CPU* cpu, bool halt);\n</code></pre> <p>Sets the Halt flag in the <code>CPU</code> structure based on the given <code>halt</code> value.</p> </li> <li> <p>Get Halt Flag <pre><code>bool getHalt(const CPU* cpu);\n</code></pre>     Returns the current state of the Halt flag.</p> </li> </ul>"},{"location":"SASM/sasm_flags%20/#132-sign-flag","title":"1.3.2. Sign Flag","text":"<ul> <li> <p>Set Sign Flag</p> <pre><code>void setSign(CPU* cpu, bool sign);\n</code></pre> <p>Sets the Sign flag in the <code>CPU</code> structure based on the given <code>sign</code> value.</p> </li> <li> <p>Get Sign Flag <pre><code>bool getSign(const CPU* cpu);\n</code></pre>     Returns the current state of the Sign flag.</p> </li> </ul>"},{"location":"SASM/sasm_flags%20/#133-overflow-flag","title":"1.3.3. Overflow Flag","text":"<ul> <li> <p>Set Overflow Flag</p> <pre><code>void setOverflow(CPU* cpu, bool overflow);\n</code></pre> <p>Sets the Overflow flag in the <code>CPU</code> structure based on the given <code>overflow</code> value.</p> </li> <li> <p>Get Overflow Flag <pre><code>bool getOverflow(const CPU* cpu);\n</code></pre>     Returns the current state of the Overflow flag.</p> </li> </ul>"},{"location":"SASM/sasm_flags%20/#134-carry-flag","title":"1.3.4. Carry Flag","text":"<ul> <li> <p>Set Carry Flag</p> <pre><code>void setCarry(CPU* cpu, bool carry);\n</code></pre> <p>Sets the Carry flag in the <code>CPU</code> structure based on the given <code>carry</code> value.</p> </li> <li> <p>Get Carry Flag <pre><code>bool getCarry(const CPU* cpu);\n</code></pre>     Returns the current state of the Carry flag.</p> </li> </ul>"},{"location":"SASM/sasm_flags%20/#135-borrow-flag","title":"1.3.5. Borrow Flag","text":"<ul> <li> <p>Set Borrow Flag</p> <pre><code>void setBorrow(CPU* cpu, bool borrow);\n</code></pre> <p>Sets the Borrow flag in the <code>CPU</code> structure based on the given <code>borrow</code> value.</p> </li> <li> <p>Get Borrow Flag <pre><code>bool getBorrow(const CPU* cpu);\n</code></pre>     Returns the current state of the Borrow flag.</p> </li> </ul>"},{"location":"SASM/sasm_flags%20/#136-parity-flag","title":"1.3.6. Parity Flag","text":"<ul> <li> <p>Set Parity Flag</p> <pre><code>void setParity(CPU* cpu, bool parity);\n</code></pre> <p>Sets the Parity flag in the <code>CPU</code> structure based on the given <code>parity</code> value.</p> </li> <li> <p>Get Parity Flag <pre><code>bool getParity(const CPU* cpu);\n</code></pre>     Returns the current state of the Parity flag.</p> </li> </ul>"},{"location":"SASM/sasm_flags%20/#137-zero-flag","title":"1.3.7. Zero Flag","text":"<ul> <li> <p>Set Zero Flag</p> <pre><code>void setZero(CPU* cpu, bool zero);\n</code></pre> <p>Sets the Zero flag in the <code>CPU</code> structure based on the given <code>zero</code> value.</p> </li> <li> <p>Get Zero Flag <pre><code>bool getZero(const CPU* cpu);\n</code></pre>     Returns the current state of the Zero flag.</p> </li> </ul>"},{"location":"SASM/sasm_instructions%20/","title":"1. SASM Instructions","text":"<p>File: <code>sasm_instructions.h</code> Author: Soham Metha Date: January 2025</p>"},{"location":"SASM/sasm_instructions%20/#11-table-of-contents","title":"1.1. Table of Contents","text":"<ul> <li>1. SASM Instructions<ul> <li>1.1. Table of Contents</li> <li>1.2. Opcode Enumeration</li> <li>1.3. Data Structures<ul> <li>1.3.1. Instruction Structure</li> <li>1.3.2. Program Structure</li> </ul> </li> <li>1.4. Function Declarations<ul> <li>1.4.1. Stack Operations</li> <li>1.4.2. Instruction Execution</li> <li>1.4.3. Opcode Conversion</li> </ul> </li> </ul> </li> </ul>"},{"location":"SASM/sasm_instructions%20/#12-opcode-enumeration","title":"1.2. Opcode Enumeration","text":"<p>The <code>Opcode</code> enum defines all supported instructions in SASM.</p> Opcode Description NOP No operation HLT Halt ADD Addition SUB Subtraction MUL Multiplication DIV Division EQL Equality POP Pop PSH Push DUP Duplicate JMP Jump JNZ Jump if not zero JIP Jump if positive"},{"location":"SASM/sasm_instructions%20/#13-data-structures","title":"1.3. Data Structures","text":""},{"location":"SASM/sasm_instructions%20/#131-instruction-structure","title":"1.3.1. Instruction Structure","text":"<p>Represents a single SASM instruction, consisting of an opcode and an operand.</p> <pre><code>typedef struct {\n    Opcode type;  /**&lt; The opcode of the instruction */\n    Word operand; /**&lt; The operand of the instruction */\n} Instruction;\n</code></pre>"},{"location":"SASM/sasm_instructions%20/#132-program-structure","title":"1.3.2. Program Structure","text":"<p>Represents a complete SASM program, including instructions and metadata.</p> <pre><code>typedef struct {\n    Instruction instructions[PROGRAM_CAPACITY]; /**&lt; Array of instructions */\n    Word instruction_count;                     /**&lt; Number of instructions */\n    Word instruction_size;                      /**&lt; Size of each instruction in bytes */\n} Program;\n</code></pre>"},{"location":"SASM/sasm_instructions%20/#14-function-declarations","title":"1.4. Function Declarations","text":""},{"location":"SASM/sasm_instructions%20/#141-stack-operations","title":"1.4.1. Stack Operations","text":"<ol> <li> <p>Push to Stack</p> <pre><code>Error __psh(Registers* r, Memory* mem, const Word* operand);\n</code></pre> <p>Pushes a value onto the stack.</p> </li> <li> <p>Equality Operation</p> <pre><code>Error __eql(Registers* r, Memory* mem);\n</code></pre> <p>Compares the top two values of the stack for equality.</p> </li> <li> <p>Pop from Stack</p> <pre><code>Error __pop(Registers* r, Memory* mem);\n</code></pre> <p>Pops a value from the stack.</p> </li> <li> <p>Duplicate Value <pre><code>Error __dup(Registers* r, Memory* mem, const Word* operand);\n</code></pre>     Duplicates a value on the stack based on the operand.</p> </li> </ol>"},{"location":"SASM/sasm_instructions%20/#142-instruction-execution","title":"1.4.2. Instruction Execution","text":"<ul> <li>Execute an Instruction <pre><code>Error executeInst(const Program* prog, Memory* mem, CPU* cpu);\n</code></pre>     Executes a single instruction in the virtual machine.</li> </ul>"},{"location":"SASM/sasm_instructions%20/#143-opcode-conversion","title":"1.4.3. Opcode Conversion","text":"<ol> <li> <p>Convert Opcode to String</p> <pre><code>String opcodeAsStr(const Opcode* type);\n</code></pre> <p>Converts an opcode to its string representation.</p> </li> <li> <p>Convert String to Opcode <pre><code>Opcode strAsOpcode(const String* s);\n</code></pre>     Converts a string to its corresponding opcode.</p> </li> </ol>"},{"location":"SASM/sasm_memory%20/","title":"1. Memory Structures for the GBVM Virtual Machine","text":"<p>File: <code>sasm_memory.h</code> Author: Soham Metha Date: January 2025</p> <p>This file contains the declaration of memory structures utilized by the GBVM (GameBoy Virtual Machine).</p>"},{"location":"SASM/sasm_memory%20/#11-table-of-contents","title":"1.1. Table of Contents","text":"<ul> <li>Overview</li> <li>Structures<ul> <li>Registers</li> <li>CPU</li> <li>Memory</li> </ul> </li> <li>References</li> </ul>"},{"location":"SASM/sasm_memory%20/#12-structures","title":"1.2. Structures","text":""},{"location":"SASM/sasm_memory%20/#121-registers","title":"1.2.1. Registers","text":"<p>Description: Represents the general-purpose registers of the CPU, along with the stack pointer (SP) and instruction pointer (IP).</p> <p>Members:</p> Member Type Description <code>AX</code> <code>Word</code> Accumulator register. <code>BX</code> <code>Word</code> Base register. <code>CX</code> <code>Word</code> Counter register. <code>DX</code> <code>Word</code> Data register. <code>SP</code> <code>Word</code> Stack pointer register. <code>IP</code> <code>Word</code> Instruction pointer register."},{"location":"SASM/sasm_memory%20/#122-cpu","title":"1.2.2. CPU","text":"<p>Description: Represents the central processing unit (CPU) of the virtual machine, which includes its registers and flags.</p> <p>Members:</p> Member Type Description <code>registers</code> <code>Registers</code> The CPU's general registers. <code>flags</code> <code>Word</code> CPU flags for condition checking."},{"location":"SASM/sasm_memory%20/#123-memory","title":"1.2.3. Memory","text":"<p>Description: Represents the system's memory, primarily focused on stack memory.</p> <p>Members:</p> Member Type Description <code>stack</code> <code>Word[]</code> Stack memory, defined by <code>STACK_CAPACITY</code>."},{"location":"SASM/sasm_memory%20/#13-example-usage","title":"1.3. Example Usage","text":""},{"location":"SASM/sasm_memory%20/#131-initializing-the-cpu","title":"1.3.1. Initializing the CPU","text":"<pre><code>#include \"sasm_memory.h\"\n\nint main() {\n    CPU cpu = {{0, 0, 0, 0, 0, 0}, 0};  // Initialize all registers and flags to zero.\n    cpu.registers.AX = 10;             // Set accumulator register.\n    cpu.flags = 1;                     // Set a flag value.\n    return 0;\n}\n</code></pre>"},{"location":"SASM/sasm_memory%20/#132-working-with-memory","title":"1.3.2. Working with Memory","text":"<pre><code>#include \"sasm_memory.h\"\n\nint main() {\n    Memory memory;\n    memory.stack[0] = 42;  // Push a value onto the stack.\n    printf(\"Stack[0]: %d\\n\", memory.stack[0]);  // Output: Stack[0]: 42\n    return 0;\n}\n</code></pre>"},{"location":"VM/gbvm%20/","title":"GameBoy Virtual Machine (GBVM)","text":"<p>File: <code>gbvm.h</code> Author: Soham Metha Date: January 2025</p> <p>This file contains the declarations of functions and structures related to the virtual machine. The virtual machine represents the execution environment for the Game Boy program.</p>"},{"location":"VM/gbvm%20/#structures","title":"Structures","text":""},{"location":"VM/gbvm%20/#vm","title":"<code>Vm</code>","text":"<p>Represents the virtual machine instance.</p> <ul> <li><code>Memory mem</code>: The memory component of the virtual machine.</li> <li><code>Program prog</code>: The program component of the virtual machine.</li> <li><code>CPU cpu</code>: The CPU component of the virtual machine.</li> </ul>"},{"location":"VM/gbvm%20/#functions","title":"Functions","text":""},{"location":"VM/gbvm%20/#void-loadprogramvm-vm-char-inputfile","title":"void loadProgram(Vm vm, char inputFile)","text":"<p>Loads the program from the specified input file into the virtual machine.</p> <ul> <li>Parameters:</li> <li><code>vm</code>: The virtual machine instance.</li> <li><code>inputFile</code>: The input binary file containing the program bytecode.</li> </ul>"},{"location":"VM/gbvm%20/#void-dumpstackfile-stream-const-vm-vm","title":"void dumpStack(FILE stream, const Vm vm)","text":"<p>Dumps the contents of the stack to the specified stream.</p> <ul> <li>Parameters:</li> <li><code>stream</code>: The stream to dump the stack contents to.</li> <li><code>vm</code>: The virtual machine instance.</li> </ul>"},{"location":"VM/gbvm%20/#void-dumpflagsfile-stream-const-vm-vm","title":"void dumpFlags(FILE stream, const Vm vm)","text":"<p>Dumps the flags of the virtual machine to the specified stream.</p> <ul> <li>Parameters:</li> <li><code>stream</code>: The stream to dump the flags to.</li> <li><code>vm</code>: The virtual machine instance.</li> </ul>"},{"location":"VM/gbvm%20/#void-executeprogramvm-vm-int-debug-int-i","title":"void executeProgram(Vm* vm, int debug, int i)","text":"<p>Recursively executes the program loaded in the virtual machine.</p> <ul> <li>Parameters:</li> <li><code>vm</code>: The virtual machine instance.</li> <li><code>debug</code>: The debug level (0, 1, or 2).</li> <li><code>i</code>: The current execution count.</li> </ul>"},{"location":"blog/","title":"Blog","text":""}]}